<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title id="title">Loading Channel...</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            background: #000;
            height: 100%;
            width: 100%;
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -ms-user-select: none;
            user-select: none;
            font-family: Arial, sans-serif;
        }

        #player-container {
            position: relative;
            width: 100%;
            height: 100vh;
            background: #000;
        }

        #video {
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: #000;
        }

        #controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.9));
            padding: 15px;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 100;
        }

        #player-container:hover #controls,
        #controls.visible {
            opacity: 1;
        }

        .control-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 15px;
        }

        .control-left {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .control-right {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            font-size: 16px;
            transition: background 0.2s;
        }

        .btn:hover {
            background: rgba(255,255,255,0.2);
        }

        #quality-select {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 6px 10px;
            border-radius: 4px;
            font-size: 14px;
            outline: none;
        }

        #quality-select option {
            background: #333;
            color: white;
        }

        #volume-control {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #volume-slider {
            width: 60px;
            height: 4px;
            background: rgba(255,255,255,0.3);
            border-radius: 2px;
            outline: none;
            cursor: pointer;
        }

        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 18px;
            z-index: 150;
        }

        .spinner {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        #error-msg {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(220, 53, 69, 0.9);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            z-index: 200;
            display: none;
        }

        /* Unmute overlay */
        #unmute-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 50;
            cursor: pointer;
            transition: opacity 0.3s;
        }

        #unmute-overlay.hidden {
            opacity: 0;
            pointer-events: none;
        }

        #unmute-button {
            background: rgba(0,0,0,0.7);
            color: white;
            border: 2px solid white;
            border-radius: 50%;
            width: 80px;
            height: 80px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 40px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        #unmute-button:hover {
            transform: scale(1.1);
        }

        /* Mobile responsive - Overlay controls */
        @media (max-width: 768px) {
            #controls {
                position: fixed !important;
                bottom: 0 !important;
                left: 0 !important;
                right: 0 !important;
                opacity: 1 !important;
                background: rgba(0,0,0,0.8) !important;
                padding: 15px !important;
                transform: none !important;
                transition: opacity 0.3s ease !important;
                border-top: 1px solid rgba(255,255,255,0.1);
                z-index: 1000 !important;
            }
            
            #controls.hide-mobile {
                opacity: 0 !important;
            }
            
            .control-bar {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
                gap: 10px;
                max-width: 100%;
            }
            
            .control-left {
                display: flex;
                align-items: center;
                gap: 10px;
                flex: 1;
            }
            
            .control-right {
                display: flex;
                align-items: center;
                gap: 8px;
                flex: 1;
                justify-content: flex-end;
            }
            
            #quality-select {
                min-width: 70px;
                font-size: 12px;
                padding: 6px 4px;
                max-width: 100px;
            }
            
            .btn {
                min-width: 35px;
                min-height: 35px;
                font-size: 16px;
                padding: 6px;
            }
            
            #volume-slider {
                width: 40px;
            }
            
            #volume-control {
                gap: 5px;
            }

            #unmute-button {
                width: 60px;
                height: 60px;
                font-size: 30px;
            }
        }

        /* Touch devices - auto hide controls */
        @media (pointer: coarse) {
            #controls {
                position: fixed !important;
                bottom: 0 !important;
                transition: opacity 0.3s ease !important;
            }
            
            #controls.hide-mobile {
                opacity: 0 !important;
            }
        }
        
        /* Very small screens */
        @media (max-width: 480px) {
            #controls {
                padding: 12px 8px !important;
            }
            
            .control-bar {
                gap: 8px;
            }
            
            #quality-select {
                min-width: 60px;
                font-size: 11px;
            }
            
            .btn {
                min-width: 32px;
                min-height: 32px;
                font-size: 14px;
            }

            #unmute-button {
                width: 50px;
                height: 50px;
                font-size: 24px;
            }
        }

        /* Fullscreen mode - overlay controls with auto-hide */
        :fullscreen #controls,
        :-webkit-full-screen #controls,
        :-moz-full-screen #controls {
            opacity: 1 !important;
            position: fixed !important;
            bottom: 0 !important;
            left: 0 !important;
            right: 0 !important;
            z-index: 2147483647 !important;
            background: rgba(0,0,0,0.7) !important;
            transition: opacity 0.3s ease !important;
        }
        
        :fullscreen #controls.hide-mobile,
        :-webkit-full-screen #controls.hide-mobile,
        :-moz-full-screen #controls.hide-mobile {
            opacity: 0 !important;
        }

        :fullscreen #player-container,
        :-webkit-full-screen #player-container,
        :-moz-full-screen #player-container {
            width: 100vw !important;
            height: 100vh !important;
        }

        :fullscreen #video,
        :-webkit-full-screen #video,
        :-moz-full-screen #video {
            width: 100% !important;
            height: 100% !important;
        }
    </style>
</head>
<script type='text/javascript' src='//staunchtownsegg.com/f7/bc/6b/f7bc6b128423106720db2ba226b22541.js'></script>
<body>
    <div id="player-container">
        <video id="video" playsinline webkit-playsinline muted autoplay></video>
        
        <!-- Unmute overlay -->
        <div id="unmute-overlay">
            <div id="unmute-button">üîá</div>
        </div>
        
        <div id="loading">
            <span class="spinner"></span>
            Loading stream...
        </div>
        
        <div id="error-msg">
            <h3>Stream Error</h3>
            <p id="error-text"></p>
            <button onclick="retryStream()" class="btn" style="background: white; color: red; margin-top: 10px;">Retry</button>
        </div>
        
        <div id="controls">
            <div class="control-bar">
                <div class="control-left">
                    <button id="play-btn" class="btn">‚è∏</button>
                    <div id="volume-control">
                        <button id="mute-btn" class="btn">üîä</button>
                        <input type="range" id="volume-slider" min="0" max="1" step="0.1" value="1">
                    </div>
                </div>
                <div class="control-right">
                    <select id="quality-select">
                        <option value="auto">Auto</option>
                    </select>
                    <button id="zoom-btn" class="btn">üîç</button>
                    <button id="fullscreen-btn" class="btn">‚õ∂</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.4.14/dist/hls.min.js"></script>
    
    <script>
        let hls = null;
        let video = null;
        let currentChannel = null;
        let qualityLevels = [];
        let isManualQuality = false;
        let zoomLevel = 1;
        let zoomStates = [1, 1.2, 1.3];
        let currentZoomIndex = 0;

        async function initPlayer() {
            video = document.getElementById('video');
            
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const id = urlParams.get('id');
                
                if (!id) {
                    throw new Error('No channel ID provided');
                }

                const response = await fetch('schannels.json');
                if (!response.ok) {
                    throw new Error('Failed to load channel data');
                }
                
                const channels = await response.json();
                
                if (!channels[id]) {
                    throw new Error('Invalid channel ID');
                }
                
                currentChannel = channels[id];
                document.getElementById('title').textContent = currentChannel.title;
                
                setupControls();
                loadStream();
                
            } catch (error) {
                console.error('Initialization error:', error);
                showError(error.message);
            }
        }

        function setupControls() {
            const playBtn = document.getElementById('play-btn');
            const muteBtn = document.getElementById('mute-btn');
            const volumeSlider = document.getElementById('volume-slider');
            const qualitySelect = document.getElementById('quality-select');
            const zoomBtn = document.getElementById('zoom-btn');
            const fullscreenBtn = document.getElementById('fullscreen-btn');
            const unmuteOverlay = document.getElementById('unmute-overlay');
            const unmuteButton = document.getElementById('unmute-button');

            // Unmute overlay functionality
            function updateUnmuteOverlay() {
                if (video.muted) {
                    unmuteOverlay.classList.remove('hidden');
                } else {
                    unmuteOverlay.classList.add('hidden');
                }
            }

            unmuteOverlay.addEventListener('click', () => {
                video.muted = false;
                updateMuteButton();
                updateUnmuteOverlay();
            });

            playBtn.addEventListener('click', togglePlay);
            muteBtn.addEventListener('click', toggleMute);
            volumeSlider.addEventListener('input', (e) => {
                video.volume = e.target.value;
                updateMuteButton();
            });
            qualitySelect.addEventListener('change', changeQuality);
            zoomBtn.addEventListener('click', toggleZoom);
            fullscreenBtn.addEventListener('click', toggleFullscreen);

            video.addEventListener('play', () => {
                playBtn.textContent = '‚è∏';
                hideLoading();
            });

            video.addEventListener('pause', () => {
                playBtn.textContent = '‚ñ∂';
            });

            video.addEventListener('volumechange', () => {
                updateMuteButton();
                updateUnmuteOverlay();
            });

            video.addEventListener('waiting', showLoading);
            video.addEventListener('canplay', hideLoading);
            
            // Mobile control auto-hide functionality
            let hideTimer;
            
            function showControls() {
                const controls = document.getElementById('controls');
                controls.classList.remove('hide-mobile');
                
                if (hideTimer) {
                    clearTimeout(hideTimer);
                }
                
                hideTimer = setTimeout(() => {
                    controls.classList.add('hide-mobile');
                }, 3000);
            }
            
            function hideControls() {
                const controls = document.getElementById('controls');
                controls.classList.add('hide-mobile');
            }
            
            // Show controls on video tap/click
            video.addEventListener('click', showControls);
            video.addEventListener('touchstart', showControls);
            
            // Show controls when interacting with control elements
            document.getElementById('controls').addEventListener('click', (e) => {
                e.stopPropagation();
                showControls();
            });
            
            // Show controls initially for 3 seconds
            setTimeout(() => {
                showControls();
            }, 500);

            // Initialize mute state and overlay
            updateMuteButton();
            updateUnmuteOverlay();
        }

        function loadStream() {
            showLoading();

            const proxyUrl = `https://mini.allinonereborn.online/sony/stream_proxy.php?url=${encodeURIComponent(currentChannel.m3u8)}`;

            if (Hls.isSupported()) {
                hls = new Hls({
                    maxBufferLength: 20,
                    maxMaxBufferLength: 30,
                    maxBufferSize: 30 * 1000 * 1000,
                    maxBufferHole: 0.3,
                    lowLatencyMode: true,
                    backBufferLength: 30,
                    manifestLoadingTimeOut: 8000,
                    manifestLoadingMaxRetry: 2,
                    levelLoadingTimeOut: 8000,
                    levelLoadingMaxRetry: 2,
                    fragLoadingTimeOut: 15000,
                    fragLoadingMaxRetry: 2,
                    abrEwmaDefaultEstimate: 300000,
                    abrEwmaSlowVoD: 5,
                    abrEwmaFastVoD: 5,
                    abrEwmaSlowLive: 12,
                    abrEwmaFastLive: 8,
                    abrBandWidthFactor: 0.85,
                    abrBandWidthUpFactor: 0.6,
                    startLevel: 0,
                    capLevelToPlayerSize: true,
                    capLevelOnFPSDrop: true,
                    enableWorker: false,
                    enableSoftwareAES: false
                });

                hls.loadSource(proxyUrl);
                hls.attachMedia(video);

                hls.on(Hls.Events.MANIFEST_PARSED, onManifestParsed);
                hls.on(Hls.Events.LEVEL_SWITCHED, onLevelSwitched);
                hls.on(Hls.Events.ERROR, onHlsError);
                
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                video.src = proxyUrl;
                video.addEventListener('loadedmetadata', () => {
                    hideLoading();
                });
            } else {
                showError('HLS not supported in this browser');
            }
        }

        function onManifestParsed(event, data) {
            hideLoading();
            
            const qualitySelect = document.getElementById('quality-select');
            
            while (qualitySelect.children.length > 1) {
                qualitySelect.removeChild(qualitySelect.lastChild);
            }
            
            qualityLevels = data.levels;
            
            data.levels
                .map((level, index) => ({ ...level, index }))
                .sort((a, b) => b.bitrate - a.bitrate)
                .forEach((level) => {
                    const option = document.createElement('option');
                    option.value = level.index;
                    option.textContent = `${level.height}p (${Math.round(level.bitrate / 1000)}k)`;
                    qualitySelect.appendChild(option);
                });

            video.play().catch(e => {
                console.warn('Autoplay blocked:', e);
            });
        }

        function onLevelSwitched(event, data) {}

        function onHlsError(event, data) {
            console.error('HLS Error:', data);
            
            if (data.fatal) {
                switch (data.type) {
                    case Hls.ErrorTypes.NETWORK_ERROR:
                        showError('Network error - retrying...');
                        setTimeout(() => {
                            hls.startLoad();
                        }, 2000);
                        break;
                    case Hls.ErrorTypes.MEDIA_ERROR:
                        showError('Media error - recovering...');
                        hls.recoverMediaError();
                        break;
                    default:
                        showError(`Playback error: ${data.details}`);
                        break;
                }
            }
        }

        function togglePlay() {
            if (video.paused) {
                video.play();
            } else {
                video.pause();
            }
        }

        function toggleMute() {
            video.muted = !video.muted;
            updateMuteButton();
        }

        function updateMuteButton() {
            const muteBtn = document.getElementById('mute-btn');
            if (video.muted || video.volume === 0) {
                muteBtn.textContent = 'üîá';
            } else if (video.volume < 0.5) {
                muteBtn.textContent = 'üîâ';
            } else {
                muteBtn.textContent = 'üîä';
            }
        }

        function changeQuality(event) {
            const selectedLevel = event.target.value;
            
            if (selectedLevel === 'auto') {
                hls.currentLevel = -1;
                isManualQuality = false;
            } else {
                hls.currentLevel = parseInt(selectedLevel);
                isManualQuality = true;
            }
        }

        function toggleZoom() {
            currentZoomIndex = (currentZoomIndex + 1) % zoomStates.length;
            zoomLevel = zoomStates[currentZoomIndex];
            
            video.style.transform = `scale(${zoomLevel})`;
            video.style.transformOrigin = 'center center';
            
            const zoomBtn = document.getElementById('zoom-btn');
            if (zoomLevel === 1) {
                zoomBtn.textContent = 'üîç';
            } else if (zoomLevel === 1.5) {
                zoomBtn.textContent = 'üîç+';
            } else {
                zoomBtn.textContent = 'üîç++';
            }
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.getElementById('player-container').requestFullscreen().catch(e => {
                    console.warn('Fullscreen failed:', e);
                });
            } else {
                document.exitFullscreen();
            }
        }

        function showLoading() {
            document.getElementById('loading').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        function showError(message) {
            hideLoading();
            document.getElementById('error-text').textContent = message;
            document.getElementById('error-msg').style.display = 'block';
        }

        function hideError() {
            document.getElementById('error-msg').style.display = 'none';
        }

        function retryStream() {
            hideError();
            if (hls) {
                hls.destroy();
            }
            loadStream();
        }

        document.addEventListener('DOMContentLoaded', initPlayer);
    </script>
    <!-- Anti-Adblock Popup -->
<div class="adb" id="adb" style="display: none;">
  <div class="adbs">
    <h3>Adblock/Brave Shields Detected</h3>
    <p>Please disable your adblocker or Brave Shields to continue browsing this site.</p>
  </div>
</div>

<style>
.adb {
  position: fixed;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  background: rgba(0, 0, 0, 0.85);
  z-index: 99999;
  display: none;
  align-items: center;
  justify-content: center;
}
.adbs {
  background: #fff;
  padding: 30px;
  border-radius: 12px;
  box-shadow: 0 5px 25px rgba(0, 0, 0, 0.4);
  text-align: center;
  max-width: 400px;
  width: 90%;
}
.adbs h3 {
  color: #d00;
  font-size: 24px;
  margin-bottom: 15px;
}
.adbs p {
  font-size: 16px;
  color: #333;
}
</style>

</body>
</html>
